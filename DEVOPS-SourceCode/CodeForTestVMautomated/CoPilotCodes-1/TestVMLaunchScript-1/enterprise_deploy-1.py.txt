#!/usr/bin/env python3
"""
AWS Enterprise Auto-Deployment Tool with SNS Email Notifications

This script automates AWS infrastructure deployment using Terraform.
It includes GitHub Actions automation, S3-based Terraform state management,
CloudWatch monitoring, security hardening, rollback features, and email notifications.
"""

import os
import sys
import json
import logging
import argparse
import subprocess
import boto3
from botocore.exceptions import ClientError, NoCredentialsError

# ==============================================================
# Logging Configuration
# ==============================================================

def configure_logging(debug=False):
    """Set up logging for the script."""
    log_level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("enterprise_deploy.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )
    logger = logging.getLogger(__name__)
    return logger

logger = configure_logging()

# ==============================================================
# Argument Parser
# ==============================================================

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description='Enterprise Auto-Deployment Tool with SNS Notifications')
    parser.add_argument('--region', default=os.getenv("AWS_REGION", "us-east-1"),
                        help='AWS region for deployment (default: us-east-1)')
    parser.add_argument('--config-file', default="config.json",
                        help='Path to the configuration file (default: config.json)')
    parser.add_argument('--debug', action='store_true', help='Enable debug logging')
    parser.add_argument('--dry-run', action='store_true', help='Dry run without creating resources')
    parser.add_argument('--rollback', action='store_true', help='Rollback on failure')
    parser.add_argument('--instance-count', type=int, default=3,
                        help='Number of EC2 instances to launch (default: 3)')
    return parser.parse_args()

# ==============================================================
# AWS Client Manager
# ==============================================================

class AWSManager:
    """Manages AWS session and service clients."""
    def __init__(self, region):
        self.region = region
        self.session = self._initialize_session()
        self.clients = self._initialize_clients()

    def _initialize_session(self):
        """Initialize AWS session with error handling."""
        try:
            return boto3.Session(region_name=self.region)
        except NoCredentialsError:
            logger.error("AWS credentials not found. Ensure authentication via AWS CLI or environment variables.")
            sys.exit(1)

    def _initialize_clients(self):
        """Initialize AWS service clients."""
        try:
            return {
                's3': self.session.client('s3'),
                'ec2': self.session.client('ec2'),
                'iam': self.session.client('iam'),
                'sns': self.session.client('sns')
            }
        except ClientError as e:
            logger.error(f"Failed to initialize AWS clients: {e}")
            sys.exit(1)

# ==============================================================
# SNS Notification Handling
# ==============================================================

def send_sns_email(config, subject, message):
    """Send an email notification via AWS SNS."""
    sns_client = AWSManager(config.region).clients['sns']
    sns_topic_arn = config.data.get("sns_topic_arn")

    if not sns_topic_arn:
        logger.warning("SNS topic ARN not set. Email notifications will be skipped.")
        return
    
    try:
        sns_client.publish(
            TopicArn=sns_topic_arn,
            Message=message,
            Subject=subject
        )
        logger.info(f"Email notification sent: {subject}")
    except ClientError as e:
        logger.error(f"Failed to send email notification: {e}")

# ==============================================================
# Terraform Configuration File Generation
# ==============================================================

def generate_terraform_config(config):
    """Generate the main.tf Terraform configuration file dynamically."""
    terraform_dir = config.data.get("terraform_dir", "./terraform")
    os.makedirs(terraform_dir, exist_ok=True)

    main_tf_content = f"""
    terraform {{
      backend "s3" {{
        bucket = "{config.data.get('terraform_state_bucket', 'enterprise-auto-state')}"
        key    = "terraform.tfstate"
        region = "{config.region}"
        encrypt = true
      }}
    }}

    provider "aws" {{
      region = "{config.region}"
    }}

    resource "aws_instance" "test_vm" {{
      ami           = "{config.data.get('ami_id', 'ami-0c55b159cbfafe1f0')}"
      instance_type = "{config.data.get('test_instance_type', 't2.micro')}"
      count         = {config.instance_count}

      tags = {{
        Name        = "TestVM"
        Environment = "Test"
        Project     = "EnterpriseAutoDeploy"
      }}
    }}

    output "instance_ids" {{
      value = aws_instance.test_vm[*].id
    }}
    """

    main_tf_path = os.path.join(terraform_dir, "main.tf")
    with open(main_tf_path, "w") as f:
        f.write(main_tf_content.strip())
        logger.info(f"Generated Terraform configuration at: {main_tf_path}")

# ==============================================================
# Terraform Execution
# ==============================================================

def run_terraform(config):
    """Run Terraform commands to deploy instances."""
    generate_terraform_config(config)
    terraform_dir = config.data.get("terraform_dir", "./terraform")
    try:
        logger.info("Initializing Terraform...")
        subprocess.run(["terraform", "init"], cwd=terraform_dir, check=True)
        subprocess.run(["terraform", "apply", "-auto-approve"], cwd=terraform_dir, check=True)
        logger.info("Terraform deployment completed successfully.")
        send_sns_email(config, "Terraform Deployment Success", "Infrastructure has been successfully deployed.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Terraform command failed: {e}")
        send_sns_email(config, "Terraform Deployment Failure", f"Deployment failed due to: {e}")
        sys.exit(1)

# ==============================================================
# Rollback Mechanism
# ==============================================================

def run_terraform_destroy(config):
    """Run Terraform destroy to roll back infrastructure."""
    terraform_dir = config.data.get("terraform_dir", "./terraform")
    try:
        logger.info("Running Terraform destroy for rollback...")
        subprocess.run(["terraform", "destroy", "-auto-approve"], cwd=terraform_dir, check=True)
        logger.info("Terraform destroy completed successfully.")
        send_sns_email(config, "Terraform Rollback Success", "Infrastructure rollback completed successfully.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Terraform destroy failed during rollback: {e}")
        send_sns_email(config, "Terraform Rollback Failure", f"Rollback failed due to: {e}")

# ==============================================================
# Main Execution
# ==============================================================

def main():
    """Main script execution."""
    args = parse_arguments()
    global logger
    logger = configure_logging(args.debug)

    # Initialize configuration and AWS manager
    config = Config(args)
    AWSManager(config.region)

    try:
        run_terraform(config)
        logger.info("Deployment completed successfully.")
    except Exception as e:
        logger.error(f"Deployment failed: {e}")
        if config.rollback:
            run_terraform_destroy(config)
        sys.exit(1)

if __name__ == "__main__":
    main()